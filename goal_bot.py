import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
import os

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
BOT_TOKEN = "7751726615:AAGQQ6KpVykBTfDytrEbArUZwWmx6Rc0RPc"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏)
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=types.ParseMode.MARKDOWN)
)
dp = Dispatcher()

# --- –ö–ù–û–ü–ö–ò ---
def main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="add_goal")
    builder.button(text="üìã –ú–æ–∏ —Ü–µ–ª–∏", callback_data="view_goals")
    builder.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="complete_goal")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å", callback_data="delete_goal")
    return builder.as_markup()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
user_goals = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@dp.message()
async def start_handler(message: types.Message):
    if message.text == "/start":
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ü–µ–ª—è–º –∏ –∑–∞–¥–∞—á–∞–º!\n\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )

@dp.callback_query()
async def menu_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if callback.data == "add_goal":
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:")
        dp.message.register(lambda msg: add_goal(msg, user_id))

    elif callback.data == "view_goals":
        goals = user_goals.get(user_id, [])
        if goals:
            await callback.message.answer(
                "üìã –¢–≤–æ–∏ —Ü–µ–ª–∏:\n" + "\n".join(f"- {goal}" for goal in goals)
            )
        else:
            await callback.message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π.")

    elif callback.data == "complete_goal":
        await callback.message.answer("‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã–ø–æ–ª–Ω–∏–ª–∏:")
        dp.message.register(lambda msg: complete_goal(msg, user_id))

    elif callback.data == "delete_goal":
        await callback.message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        dp.message.register(lambda msg: delete_goal(msg, user_id))

async def add_goal(message: types.Message, user_id: int):
    goal = message.text.strip()
    user_goals.setdefault(user_id, []).append(goal)
    await message.answer("üéØ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu_keyboard())

async def complete_goal(message: types.Message, user_id: int):
    try:
        num = int(message.text.strip()) - 1
        goals = user_goals.get(user_id, [])
        if 0 <= num < len(goals):
            goal = goals.pop(num)
            await message.answer(f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª —Ü–µ–ª—å: {goal}")
        else:
            await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ü–µ–ª–∏.")
    except Exception as e:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.")

    await message.answer("–í—ã–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

async def delete_goal(message: types.Message, user_id: int):
    try:
        num = int(message.text.strip()) - 1
        goals = user_goals.get(user_id, [])
        if 0 <= num < len(goals):
            goal = goals.pop(num)
            await message.answer(f"üóë –¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞: {goal}")
        else:
            await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ü–µ–ª–∏.")
    except Exception as e:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.")

    await message.answer("–í—ã–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

# --- –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ---
async def main():
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üéØ"),
    ])

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
